# Nginx main process
user nginx;
worker_processes auto;

# PID file
pid /var/run/nginx.pid;

events {
    worker_connections 16384;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # -----------------------
    # Cloudflare Integration
    # -----------------------
    # Trust Cloudflare IPs
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    real_ip_header CF-Connecting-IP;

    # -----------------------
    # DDoS Protection & Rate Limiting
    # -----------------------
    # Define rate limiting zones (using real IP from Cloudflare)
    limit_req_zone $realip_remote_addr zone=api:30m rate=30r/s;
    limit_req_zone $realip_remote_addr zone=web:30m rate=60r/s;
    limit_req_zone $realip_remote_addr zone=strict:30m rate=10r/s;
    
    # DDoS protection zones
    limit_req_zone $realip_remote_addr zone=ddos:10m rate=1r/s;
    limit_conn_zone $realip_remote_addr zone=conn_limit_per_ip:10m;

    # Rate limiting status codes
    limit_req_status 429;
    limit_conn_status 429;

    # -----------------------
    # Compression
    # -----------------------
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_vary on;

    # -----------------------
    # Security Headers
    # -----------------------
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # -----------------------
    # Proxy timeout (global defaults)
    # -----------------------
    proxy_connect_timeout   30s;
    proxy_send_timeout      60s;
    proxy_read_timeout      60s;
    send_timeout            60s;

    # -----------------------
    # Upstream definitions
    # -----------------------
    upstream web_backend {
        server web:3000 max_fails=3 fail_timeout=10s;
    }

    upstream api_backend {
        server api:3001 max_fails=3 fail_timeout=10s;
    }

    upstream pgadmin_backend {
        server pgadmin:5433 max_fails=3 fail_timeout=10s;
    }

    # -----------------------
    # Next.js app for codevn.dev
    # -----------------------
    server {
        listen 80;
        server_name codevn.dev www.codevn.dev;

        # DDoS Protection
        limit_conn conn_limit_per_ip 20;
        limit_req zone=ddos burst=5 nodelay;

        # NAT Network Detection removed for simplicity
        # Using standard rate limiting for all requests

        # Bot Detection & Blocking (with whitelist for legitimate bots and health checks)
        set $block_bot 0;
        if ($http_user_agent ~* (bot|crawler|spider|scraper|curl|wget|python|java|php)) {
            set $block_bot 1;
        }
        # Whitelist legitimate bots
        if ($http_user_agent ~* (googlebot|bingbot|slurp|duckduckbot|baiduspider|yandexbot|facebookexternalhit|twitterbot|linkedinbot|whatsapp)) {
            set $block_bot 0;
        }
        # Allow curl for health checks
        if ($request_uri ~* ^/(status)) {
            set $block_bot 0;
        }
        if ($block_bot = 1) {
            return 403;
        }

        # Block suspicious requests
        if ($request_uri ~* (\.\.|\.\./|\.\.\\|\.\.%2f|\.\.%5c)) {
            return 403;
        }

        # Block requests with no user agent
        if ($http_user_agent = "") {
            return 403;
        }

        # Block requests with suspicious headers
        if ($http_x_forwarded_for ~* (127\.0\.0\.1|localhost|0\.0\.0\.0)) {
            return 403;
        }

        # Strict rate limiting for auth endpoints
        location ~ ^/api/auth/ {
            # Use standard rate limiting (NAT detection removed for simplicity)
            limit_req zone=strict burst=10 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # API routes -> Fastify
        location /api/ {
            # Use standard rate limiting (NAT detection removed for simplicity)
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_cache_bypass $http_upgrade;

            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Next.js frontend
        location / {
            # Use standard rate limiting (NAT detection removed for simplicity)
            limit_req zone=web burst=60 nodelay;
            
            proxy_pass http://web_backend;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;

            proxy_cache_bypass $http_upgrade;

            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Static files (no rate limiting)
        location /uploads/ {
            alias /app/public/uploads/;
            autoindex off;
            add_header Cache-Control "public, max-age=2592000, immutable";
            try_files $uri =404;
        }

        # Next.js static assets (no rate limiting)
        location /_next/static/ {
            proxy_pass http://web_backend/_next/static/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Next.js build assets (no rate limiting)
        location /_next/ {
            proxy_pass http://web_backend/_next/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Health check (no rate limiting)
        location /status {
            return 200 "ok\n";
        }

        # Health check endpoint (no rate limiting)
        location /health {
            proxy_pass http://api_backend/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
        
        client_max_body_size 50M;
    }

    # -----------------------
    # pgAdmin for pgadmin.codevn.dev
    # -----------------------
    server {
        listen 80;
        server_name pgadmin.codevn.dev;

        # Simple protection for personal use
        limit_conn conn_limit_per_ip 10;
        limit_req zone=ddos burst=10 nodelay;

        # Block requests with no user agent
        if ($http_user_agent = "") {
            return 403;
        }

        # Simple pgAdmin access
        location / {
            proxy_pass http://pgadmin_backend;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        client_max_body_size 50M;
    }
}